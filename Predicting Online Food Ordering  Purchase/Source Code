Predicting Online Food Ordering Purchases
"""

import numpy as np
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_theme(style="whitegrid")

data = pd.read_csv("/content/onlinefoodss.csv")
print(data.head())

print(data.info())

plt.figure(figsize=(8, 6))
plt.title("Online Food Order Decisions Based on the Age of the Customer")
sns.histplot(x="Age", hue="Output", data=data)
plt.show()

plt.figure(figsize=(8, 6))
plt.title("Online Food Order Decisions Based on the Size of the Family")
sns.histplot(x="Family size", hue="Output", data=data)
plt.show()

buying_again_data = data.query("Output == 'Yes'")
print(buying_again_data.head())

gender = buying_again_data["Gender"].value_counts()
label = gender.index
counts = gender.values
colors = ['Red','Green']

fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Who Orders Food Online More: Male Vs Female')
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=30,
                  marker=dict(colors=colors, line=dict(color='black', width=3)))
fig.show()

marital = buying_again_data["Marital Status"].value_counts()
label = marital.index
counts = marital.values
colors = ['Red','Green']

fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Who Orders Food Online More: Married Vs Singles')
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=30,
                  marker=dict(colors=colors, line=dict(color='black', width=3)))
fig.show()

income = buying_again_data["Monthly Income"].value_counts()
label = income.index
counts = income.values
colors = ['Red','Green']

fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text='Which Income Group Orders Food Online More')
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=30,
                  marker=dict(colors=colors, line=dict(color='black', width=3)))
fig.show()

data["Gender"] = data["Gender"].map({"Male": 1, "Female": 0})
data["Marital Status"] = data["Marital Status"].map({"Married": 2,
                                                     "Single": 1,
                                                     "Prefer not to say": 0})
data["Occupation"] = data["Occupation"].map({"Student": 1,
                                             "Employee": 2,
                                             "Self Employeed": 3,
                                             "House wife": 4})
data["Educational Qualifications"] = data["Educational Qualifications"].map({"Graduate": 1,
                                                                             "Post Graduate": 2,
                                                                             "Ph.D": 3, "School": 4,
                                                                             "Uneducated": 5})
data["Monthly Income"] = data["Monthly Income"].map({"No Income": 0,
                                                     "25001 to 50000": 5000,
                                                     "More than 50000": 7000,
                                                     "10001 to 25000": 25000,
                                                     "Below Rs.10000": 10000})
data["Feedback"] = data["Feedback"].map({"Positive": 1, "Negative ": 0})
print(data.head())

buying_again_data = data.query("Output == 'No'")
print(buying_again_data.head())

x = np.array(data[["Age", "Gender", "Marital Status", "Occupation",
                   "Monthly Income", "Educational Qualifications",
                   "Family size", "Pin code", "Feedback"]])
y = np.array(data["Output"])

from sklearn.ensemble import RandomForestClassifier
xtrain, xtest, ytrain, ytest = train_test_split(x, y,test_size=0.10,random_state=42)
model = RandomForestClassifier()
#model=LogisticRegression()
model.fit(xtrain, ytrain)

import ipywidgets as widgets
from IPython.display import display
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

age_widget = widgets.IntSlider(description="Age:", min=18, max=100)
gender_widget = widgets.Dropdown(options=[("Male", 1), ("Female", 0)], description="Gender:")
marital_status_widget = widgets.Dropdown(options=[("Single", 1), ("Married", 2), ("Not Revealed", 3)], description="Marital Status:")
occupation_widget = widgets.Dropdown(options=[("Student", 1), ("Employee", 2), ("Self Employed", 3), ("Housewife", 4)], description="Occupation:")
income_widget = widgets.Dropdown(options=[("No Income", 0), ("25001 to 50000", 5000), ("More than 50000", 7000), ("10001 to 25000", 25000), ("Below Rs.10000", 10000)], description="Monthly Income:")
education_widget = widgets.Dropdown(options=[("Graduate", 1), ("Post Graduate", 2), ("Ph.D", 3), ("School", 4), ("Uneducated", 5)], description="Education:")
family_size_widget = widgets.IntSlider(description="Family Size:", min=1, max=10, value=4)
pin_code_widget = widgets.IntText(description="Pin Code:")
feedback_widget = widgets.Dropdown(options=[("Positive", 1), ("Negative", 0)], description="Feedback:")

def predict_button_clicked(btn):
    user_features = [
        age_widget.value,
        gender_widget.value,
        marital_status_widget.value,
        occupation_widget.value,
        income_widget.value,
        education_widget.value,
        family_size_widget.value,
        pin_code_widget.value,
        feedback_widget.value,
    ]

    # Predict using the model
    prediction = model.predict_proba([user_features])

    # Display prediction
    print("Predicted output (Will the customer order again?):", prediction)

    # Create a bar chart to visualize the probabilities
    classes = ['Negative', 'Positive']
    plt.bar(classes, prediction[0])
    plt.xlabel('Classes')
    plt.ylabel('Probability')
    plt.title('Prediction Probabilities')
    plt.show()
    print(model.score(xtest, ytest))

# Creating a button widget
predict_button = widgets.Button(description='Predict')

# Connecting the button to the prediction function
predict_button.on_click(predict_button_clicked)

# Displaying the button along with the existing widgets
display(age_widget, gender_widget, marital_status_widget, occupation_widget, income_widget,
        education_widget, family_size_widget, pin_code_widget, feedback_widget, predict_button)
